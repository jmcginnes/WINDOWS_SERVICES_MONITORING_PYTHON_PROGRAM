#############################
#
#   Service Monitoring Program
#   Created By: John McGinnes
#   Date: 09/10/2025
#
#############################
########################
#
# Imports and Environment
#
########################
import sys
import os
import datetime
import win32serviceutil
from dotenv import load_dotenv

# Load environment variables
env_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env')
load_dotenv(env_path)

# Append shared library path
sys.path.append(os.getenv('SHARED_LIBRARIES'))

# Import shared libraries
from SharedLogger import createLogger
from O365Manager import sendEmail


########################
#
# Logger Setup
#
########################
programDirectory = os.getcwd()
programName = os.getenv('PROGRAM_NAME', 'ServiceMonitor')
formattedDate = datetime.datetime.now().strftime("%Y-%m-%d")

log_dir = os.path.join(programDirectory, 'log')
os.makedirs(log_dir, exist_ok=True)

logger = createLogger(log_dir + '\\', programName + ' - ' + formattedDate + '.log')
logger.info('Starting ' + programName)


########################
#
# Email Alert Function
#
########################
# Send Email Alert
def send_alert(service_name, server_name, status):
    subject = f"ALERT: {service_name} not running on {server_name}"

    body = f"""
    <html>
    <body>
        <p><strong>Service '{service_name}'</strong> is <span style="color:red;"><strong>STOPPED</strong></span> on <strong>{server_name}</strong>.</p>
        <p><strong>Status:</strong> {status}</p>

        <p>Please check the server/service immediately.</p>

        <hr>
        <h3> Restart Instructions</h3>
        <ol>
            <li>Log into the server: <strong>{server_name}</strong></li>
            <li>Open the <strong>Services</strong> console (<code>services.msc</code>)</li>
            <li>Find the service: <strong>{service_name}</strong></li>
            <li>Right-click and choose <strong>Start</strong></li>
        </ol>

        <p><strong>Or use the following command from the command line:</strong></p>
        <pre><code>sc \\\\{server_name} start "{service_name}"</code></pre>

        <hr>
        <p>This message was generated by the <em>{programName}</em> monitoring tool.</p>
    </body>
    </html>
    """

    logger.info(f"Sending email: {subject}")
    sendEmail(os.getenv('DL').split(','), subject, body)

########################
#
# Service Status Check
#
########################
def check_service_status(service_name, machine=None):
    try:
        if machine and not machine.startswith("\\\\"):
            machine = f"\\\\{machine}"
        status_code = win32serviceutil.QueryServiceStatus(service_name, machine=machine)[1]
        status_lookup = {
            1: 'Stopped',
            2: 'Start Pending',
            3: 'Stop Pending',
            4: 'Running',
            5: 'Continue Pending',
            6: 'Pause Pending',
            7: 'Paused'
        }
        status = status_lookup.get(status_code, f'Unknown ({status_code})')
        logger.info(f"Service '{service_name}' on '{machine or 'local'}' status: {status}")
        return status.lower()
    except Exception as e:
        logger.error(f"Could not retrieve service '{service_name}' on '{machine or 'local'}': {e}")
        return "not found"


########################
#
# Load Services from .env
#
########################
def get_all_services():
    service_definitions = []
    for key, value in os.environ.items():
        if key.startswith("SERVICE_"):
            try:
                service_name, server_name = value.split("|")
                service_definitions.append((service_name.strip(), server_name.strip()))
            except ValueError:
                logger.error(f"Invalid format in {key}: '{value}' (expected 'ServiceName|ServerName')")
    return service_definitions


########################
#
# Main Logic
#
########################
if __name__ == "__main__":
    logger.info("Checking all configured services...")

    services = get_all_services()

    if not services:
        logger.warning("No services found in environment file.")
    
    for service_name, server_name in services:
        logger.info(f"Checking service: {service_name} on server: {server_name}")
        status = check_service_status(service_name, machine=server_name)

        if status != "running":
            logger.error(f"Service '{service_name}' is NOT running on {server_name} (Status: {status})")
            send_alert(service_name, server_name, status)
        else:
            logger.info(f"Service '{service_name}' is running as expected on {server_name}.")

    logger.info("Script complete.")
